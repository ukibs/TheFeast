<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_test</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Varaibles
health = 100;
//Variables de velocidad
hsp = 0;
vsp = 0;
h_direction = 0;
v_direction = 0;
last_hDirection = 0;
last_vDirection = 0;
movement_speed = 10;
//Varaibles de salto
zsp = 0;
jumpspeed = 10;
falling_speed = 0;
distance_to_floor = 0;
grounded = false;
//Status variables
status_still = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the keys
    //Movement keys
    //Falta meter joystick
key_left = keyboard_check(vk_left) || gamepad_button_check(0,gp_padl);
key_right = keyboard_check(vk_right) || gamepad_button_check(0,gp_padr);
key_up = keyboard_check(vk_up) || gamepad_button_check(0,gp_padu);
key_down = keyboard_check(vk_down) || gamepad_button_check(0,gp_padd);
    //Action keys
    //Falta meter teclas
    //Y dejar claro como funcionan
key_action_1_pressed = gamepad_button_check_pressed(0, gp_face1) || keyboard_check_pressed(vk_control);
key_action_2_pressed = gamepad_button_check_pressed(0, gp_face2) || keyboard_check_pressed(vk_space);
key_action_3_pressed = gamepad_button_check_pressed(0, gp_face3);
key_action_4_pressed = gamepad_button_check_pressed(0, gp_face4);

//If we are not locked...
if(status_still == false){
    //Move the player
    h_direction = -key_left + key_right;
    v_direction = -key_up + key_down; 
    //Save the directions for control
    if(h_direction != 0) last_hDirection = h_direction;
    if(v_direction != 0) last_vDirection = v_direction; 
    //Acceleration
    if(abs(hsp + h_direction) &lt; movement_speed)
        hsp += h_direction;
    if(abs(vsp + v_direction) &lt; movement_speed)
        vsp += v_direction;
    //Decceleration
    if(h_direction == 0 &amp;&amp; hsp != 0)
        hsp -= sign(hsp);
    if(v_direction == 0 &amp;&amp; vsp != 0)
        vsp -= sign(vsp);
    //(To not) collide control
    if(grounded == true){
        while(place_meeting(x + hsp, y, obj_solid_terrain) &amp;&amp; hsp != 0){
            hsp -= sign(hsp);
        }
        while(place_meeting(x, y + vsp, obj_solid_terrain) &amp;&amp; vsp != 0){
            vsp -= sign(vsp);
        }
    }
    //Control de horizonte
        //De momento con una altura fijada
    while(y + vsp + distance_to_floor &lt; 200 &amp;&amp; vsp != 0){
        vsp -= sign(vsp);
    }
    //Acci칩n de ataque
    if(key_action_1_pressed){
        attack = instance_create(x, y, obj_attack);
        attack.direction = direction;
        attack.image_angle = direction;
    }
    //Acci칩n de salto
    if(key_action_2_pressed &amp;&amp; grounded == true){
        grounded = false;
            //
        falling_speed = -jumpspeed;            
    }
    //Control de gravedad
    if(grounded == false){
        falling_speed += 1;
        if(distance_to_floor - falling_speed &lt; 0){
            zsp = distance_to_floor;
            //zsp = 0;
            distance_to_floor = 0;
            falling_speed = 0;
            grounded = true;
        }
        else{
            distance_to_floor -= falling_speed;
            zsp = falling_speed;
        }
    }
    //Aplicamos movimiento en x,y
    x += hsp;
    y += vsp + zsp;
    //
    zsp = 0;
    //Control para no salir de la pantalla
    x = clamp(x, sprite_width/2, room_width - sprite_width/2);
    y = clamp(y, sprite_height/2, room_height - sprite_height/2);
}
//Ya meteremos cambio de sprite y dem치s
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid_terrain">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//En el caso de que se clave a pesar del control previo
if(grounded == true)
    move_outside_solid(point_direction(other.x, other.y, x, y), 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Control stuff
//draw_text(10, 10, distance_to_floor);
//draw_text(10, 30, falling_speed);

//Y el da침o
draw_set_alpha(1 - health/100);
draw_sprite(spr_damage, 0, 0, 0);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Primero la sombra
draw_sprite(spr_shadow, 0, x, y + distance_to_floor);
//a si mismo
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
